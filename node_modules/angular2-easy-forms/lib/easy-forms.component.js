"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var control_group_service_1 = require('./control-group.service');
var question_component_1 = require('./question.component');
var EasyFormsComponent = (function () {
    function EasyFormsComponent(_controlGroup) {
        this._controlGroup = _controlGroup;
        this.onSubmit = new core_1.EventEmitter();
        this.onChanges = new core_1.EventEmitter();
    }
    Object.defineProperty(EasyFormsComponent.prototype, "easyFormData", {
        set: function (value) {
            this._data = value;
            this.sortQuestions();
            var cg = this._controlGroup.create(this._data.questions);
            this._form = cg.fbGroup;
            this._matches = cg.matches;
            this.setSettings();
            this.comp = { data: this._data, form: this._form };
        },
        enumerable: true,
        configurable: true
    });
    EasyFormsComponent.prototype.submit = function () { this.onSubmit.emit(this._form.value); };
    EasyFormsComponent.prototype.onQuestionValueChange = function (event) {
        if (this._matches) {
            var key_1 = Object.keys(event)[0], mat = this._matches.find(function (a) { return a.toMatch === key_1; });
            if (mat)
                this._form.controls[mat.model].updateValueAndValidity();
        }
        this.onChanges.emit(event);
    };
    EasyFormsComponent.prototype.sortQuestions = function () { this._data.questions.sort(function (a, b) { return a.order - b.order; }); };
    EasyFormsComponent.prototype.setSettings = function () {
        var defaultSettings = {
            submitButton: true,
            submitButtonText: 'Submit'
        };
        if (this._data.settings) {
            for (var p in defaultSettings)
                if (!this._data.settings[p])
                    this._data.settings[p] = defaultSettings[p];
        }
        else
            this._data.settings = defaultSettings;
    };
    EasyFormsComponent = __decorate([
        core_1.Component({
            selector: 'easy-form',
            providers: [control_group_service_1.ControlGroupService],
            directives: [question_component_1.QuestionComponent],
            inputs: ['easyFormData'],
            outputs: ['onSubmit', 'onChanges'],
            template: "\n        <div>\n            <form (ngSubmit)=\"submit()\" [ngFormModel]=\"comp.form\" [ngClass]=\"comp.data.classes?.form\">\n                <ef-question *ngFor=\"let q of comp.data.questions\" [info]=\"{question: q, form: comp.form}\" (valueChange)=\"onQuestionValueChange($event)\"></ef-question>\n                <div *ngIf=\"comp.data.settings.submitButton\" [ngClass]=\"comp.data.classes?.submit\">\n                    <input type=\"submit\" [disabled]=\"!comp.form.valid\" [value]=\"comp.data.settings.submitButtonText\">\n                </div>\n            </form>\n        </div>\n    "
        }), 
        __metadata('design:paramtypes', [control_group_service_1.ControlGroupService])
    ], EasyFormsComponent);
    return EasyFormsComponent;
}());
exports.EasyFormsComponent = EasyFormsComponent;
//# sourceMappingURL=easy-forms.component.js.map