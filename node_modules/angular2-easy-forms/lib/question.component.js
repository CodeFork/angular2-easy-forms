"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var QuestionComponent = (function () {
    function QuestionComponent() {
        this.valueChange = new core_1.EventEmitter();
        this.checkboxIsRequired = false;
    }
    Object.defineProperty(QuestionComponent.prototype, "toSet", {
        get: function () {
            return this.question && this.question.classes && this.question.classes.wrapper ? this.question.classes.wrapper : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QuestionComponent.prototype, "info", {
        set: function (value) {
            this.question = value.question;
            this.form = value.form;
            if (this.question.type === 'checkbox') {
                if (!this.question.value)
                    this.question.value = [];
                if (this.question.validation && this.question.validation.find(function (a) { return a.type === 'required'; }))
                    this.checkboxIsRequired = true;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QuestionComponent.prototype, "isValid", {
        get: function () { return this.form.controls[this.question.key].valid; },
        enumerable: true,
        configurable: true
    });
    QuestionComponent.prototype.errors = function () {
        var _this = this;
        if (Array.isArray(this.question.validation)) {
            var temp_1 = [];
            this.question.validation.forEach(function (a) {
                if (a.type === 'required' && !a.message)
                    temp_1.push((_this.question.label || _this.question.key) + " is required");
                if (_this.form.controls[_this.question.key].hasError(a.type.toLowerCase()))
                    temp_1.push(a.message);
            });
            return temp_1;
        }
        else
            return this.question.validation.message;
    };
    QuestionComponent.prototype.setRadio = function (option) {
        this.form.controls[this.question.key].updateValue(option.value);
        this.onValueChange(option.value);
    };
    QuestionComponent.prototype.setCheckbox = function (option) {
        var index = this.question.value.indexOf(option.value);
        if (index !== -1)
            this.question.value.splice(index, 1);
        else
            this.question.value.push(option.value);
        this.form.controls[this.question.key].updateValue(this.question.value);
        this.onValueChange(this.question.value);
    };
    QuestionComponent.prototype.chackboxValueChange = function () {
        var _this = this;
        if (this.question.value.length === 1)
            this.question.options.find(function (a) { return a.value === _this.question.value[0]; }).disabled = true;
        else
            this.question.options.forEach(function (a) { return a.disabled = false; });
    };
    QuestionComponent.prototype.onValueChange = function (event) { if (this.question.emitChanges !== false)
        this.valueChange.emit((_a = {}, _a[this.question.key] = event, _a)); var _a; };
    QuestionComponent.prototype.isSelectActive = function (option) { return this.question.value.find(function (a) { return a === option.value; }) ? true : false; };
    __decorate([
        core_1.HostBinding('class'), 
        __metadata('design:type', Object)
    ], QuestionComponent.prototype, "toSet", null);
    QuestionComponent = __decorate([
        core_1.Component({
            selector: 'ef-question',
            inputs: ['info'],
            outputs: ['valueChange'],
            template: "\n        <div [ngFormModel]=\"form\">\n            <label \n                *ngIf=\"question.label\" \n                [ngClass]=\"question.classes?.label\"\n                [attr.for]=\"question.key\">\n                {{question.label}}\n            </label>\n            \n            <div [ngSwitch]=\"question.type\">\n                <select \n                    *ngSwitchWhen=\"'dropdown'\"\n                    [ngControl]=\"question.key\"\n                    (ngModelChange)=\"onValueChange($event)\"\n                    [id]=\"question.key\">\n                    [ngClass]=\"question.classes?.question\"\n                    <option *ngFor=\"let o of question.options\" [value]=\"o.value\">{{o.name ? o.name : o.value}}</option>\n                </select>   \n                \n                <div *ngSwitchWhen=\"'checkbox'\" [ngClass]=\"question.classes?.question\">\n                    <div class=\"checkbox\" *ngFor=\"let o of question.options\">\n                        <input \n                            [type]=\"question.type\"\n                            [ngControl]=\"question.key\"\n                            [name]=\"question.key\"\n                            [value]=\"o.value\"\n                            [checked]=\"isSelectActive(o)\"\n                            (change)=\"chackboxValueChange()\"\n                            [disabled]=\"o.disabled\"\n                            (click)=\"setCheckbox(o)\">\n                        <span>{{o.name ? o.name : o.value}}</span>   \n                    </div>\n                </div>\n                \n                <div *ngSwitchWhen=\"'radio'\" [ngClass]=\"question.classes?.question\">\n                    <div class=\"radio\" *ngFor=\"let o of question.options\">\n                        <input \n                            [type]=\"question.type\"\n                            [ngControl]=\"question.key\"\n                            [name]=\"question.key\"\n                            [value]=\"o.value\"\n                            [checked]=\"question.value === o.value\"\n                            (click)=\"setRadio(o)\">\n                        <span>{{o.name ? o.name : o.value}}</span>    \n                    </div>\n                </div>\n            \n                <input \n                    *ngSwitchDefault\n                    [ngControl]=\"question.key\"  \n                    [type]=\"question.type\"\n                    (ngModelChange)=\"onValueChange($event)\"\n                    [ngClass]=\"question.classes?.question\"\n                    [id]=\"question.key\"> \n            </div>\n            \n            <div class=\"error-block\" *ngIf=\"!isValid\" [ngClass]=\"question.classes?.error\">\n                <span *ngFor=\"let e of errors()\">{{e}}</span>\n            </div>\n        </div>\n\n    "
        }), 
        __metadata('design:paramtypes', [])
    ], QuestionComponent);
    return QuestionComponent;
}());
exports.QuestionComponent = QuestionComponent;
//# sourceMappingURL=question.component.js.map